{"version":3,"sources":["components/Header.js","pages/Home.js","App.js","util/CSV.js","EntityManager.js","index.js"],"names":["Header","react_default","a","createElement","reactstrap_es","className","color","dark","expand","NavLink","this","props","domain","to","Component","Home","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","key","dtdcId","dvdcId","state","currentEvent","onClose","bind","assertThisInitialized","setState","_this2","main_esm","defaultView","height","header","left","center","right","buttonText","today","month","week","day","list","plugins","googleCalendarPlugin","dayGridPlugin","listPlugin","googleCalendarApiKey","eventSources","googleCalendarId","id","eventClick","info","jsEvent","preventDefault","console","log","event","isOpen","toggle","title","dangerouslySetInnerHTML","__html","extendedProps","description","location","onClick","HomePage","withRouter","App","BrowserRouter","Switch","Route","exact","path","render","CSV","strData","strDelimiter","objPattern","RegExp","arrData","arrMatches","exec","strMatchedValue","strMatchedDelimiter","length","push","replace","trim","outputArray","forEach","row","join","EntityManager","url","options","fetch","then","response","json","catch","ex","b","text","responseText","alert","window","EM","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","next","ReactDOM","src_App","document","getElementById","stop"],"mappings":"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","file":"static/js/main.25f016c4.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { NavLink } from \"react-router-dom\";\r\nimport { Navbar, Nav, NavItem } from 'reactstrap';\r\n\r\nclass Header extends Component {\r\n    render() {\r\n        return (\r\n            <Navbar className=\"mb-3 justify-content-between\" color=\"dark\" dark expand=\"lg\">\r\n                <NavLink className={\"navbar-brand \" + (this.props.domain ? 'small' : '')} to=\"/\">\r\n                    <h5 className=\"display\">Pike County Regional Democratic Event Calendar</h5>\r\n                </NavLink>\r\n            </Navbar>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Header;","import React, { Component } from 'react';\r\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\r\nimport FullCalendar from '@fullcalendar/react'\r\nimport googleCalendarPlugin from '@fullcalendar/google-calendar';\r\nimport dayGridPlugin from '@fullcalendar/daygrid';\r\nimport listPlugin from '@fullcalendar/list';\r\n\r\nexport default class Home extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.key = \"AIzaSyAaILCizCSc-FWhip1skn_03Nl3RtYqbEE\";\r\n        this.dtdcId = \"9hsi23n792il4r2fpnk08kmnj8@group.calendar.google.com\";\r\n        this.dvdcId = \"88nt7fbcnbvdk7q5ojngskd2rc@group.calendar.google.com\";\r\n\r\n        this.state = {\r\n            currentEvent: null\r\n        };\r\n\r\n        this.onClose = this.onClose.bind(this);\r\n    }\r\n\r\n    onClose() {\r\n        this.setState({ currentEvent: null });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div key=\"contents\" className=\"page page-home container-fluid\">\r\n                <FullCalendar\r\n                    defaultView=\"listMonth\"\r\n                    height=\"parent\"\r\n                    header={{\r\n                        left: 'prev,next today',\r\n                        center: 'title',\r\n                        right: 'listMonth,dayGridMonth,dayGridWeek'\r\n                    }}\r\n                    buttonText={{\r\n                        today: 'Today',\r\n                        month: 'Month',\r\n                        week: 'Week',\r\n                        day: 'Day',\r\n                        list: 'List'\r\n                    }}\r\n                    plugins={[googleCalendarPlugin, dayGridPlugin, listPlugin]}\r\n                    googleCalendarApiKey={this.key}\r\n                    eventSources={[\r\n                        {\r\n                            googleCalendarId: this.dtdcId,\r\n                            className: 'dtdc',\r\n                            id: 'dtdc',\r\n                            color: \"#f7c121\",                            \r\n                        },\r\n                        {\r\n                            googleCalendarId: this.dvdcId,\r\n                            className: 'dvdc',\r\n                            id: 'dvdc',\r\n                            color: \"#27aff3\",                            \r\n                        }\r\n                    ]}\r\n                    eventClick={(info) => {\r\n                        info.jsEvent.preventDefault();\r\n                        console.log(info);\r\n                        this.setState({ currentEvent: info.event });\r\n                    }}\r\n                />\r\n                {this.state.currentEvent ? \r\n                    <Modal isOpen={this.state.currentEvent?true:false} toggle={this.onClose}>\r\n                        <ModalHeader toggle={this.toggle}>{this.state.currentEvent.title}</ModalHeader>\r\n                        <ModalBody>     \r\n                            <h5>Description:</h5>                      \r\n                            <div dangerouslySetInnerHTML={{ __html: this.state.currentEvent.extendedProps.description }} />\r\n                            <hr/>\r\n                            <h5>Location:</h5>\r\n                            <div dangerouslySetInnerHTML={{ __html: this.state.currentEvent.extendedProps.location }} />\r\n                        </ModalBody>\r\n                        <ModalFooter>\r\n                            <Button color=\"secondary\" onClick={this.onClose}>Close</Button>\r\n                        </ModalFooter>\r\n                    </Modal>\r\n                : null }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React, { Component } from 'react';\nimport { BrowserRouter, Switch, Route } from \"react-router-dom\";\nimport { withRouter } from \"react-router\";\nimport Header from './components/Header';\nimport Home from './pages/Home';\n\nconst HeaderComp = withRouter(Header);\nconst HomePage = withRouter(Home);\n\nclass App extends Component {\n    render() {\n        return (         \n            <BrowserRouter key=\"router\">  \n                <div className={'page-container'}>\n                    <Switch>\n                        <Route exact path={'/'} render={() => <HomePage {...this.props} />} />\n                    </Switch>  \n                </div>\n            </BrowserRouter>         \n        );\n    }\n}\n\nexport default App;\n","/* eslint no-cond-assign: 0 */\r\nimport saver from 'file-saver';\r\nimport _ from 'underscore';\r\n\r\nexport default {\r\n    save: (filename, data) => {\r\n        let csv_output = '';\r\n        _.each(data, function (row) {\r\n            let rowOutput = _.map(row, function (cell) {\r\n                if (typeof cell !== \"undefined\" && cell != null) {\r\n                    return cell.toString().replace(/\"/g, '\"\"');\r\n                } else {\r\n                    return '';\r\n                }\r\n            });\r\n            csv_output += '\"' + rowOutput.join('\",\"') + '\"\\n';\r\n        });\r\n\r\n        let newName = filename;\r\n        if (filename.slice(-4) !== '.csv'){\r\n            newName = filename + '.csv';\r\n        }\r\n        saver.saveAs(new Blob([csv_output], { type: \"text/csv\" }), newName);\r\n    },\r\n\r\n    fromString: (strData, strDelimiter) => {\r\n        // Check to see if the delimiter is defined. If not,\r\n        // then default to comma.\r\n        strDelimiter = (strDelimiter || \",\");\r\n\r\n        // Create a regular expression to parse the CSV values.\r\n        var objPattern = new RegExp(\r\n            (\r\n                // Delimiters.\r\n                \"(\\\\\" + strDelimiter + \"|\\\\r?\\\\n|\\\\r|^)\" +\r\n\r\n                // Quoted fields.\r\n                \"(?:\\\"([^\\\"]*(?:\\\"\\\"[^\\\"]*)*)\\\"|\" +\r\n\r\n                // Standard fields.\r\n                \"([^\\\"\\\\\" + strDelimiter + \"\\\\r\\\\n]*))\"\r\n            ),\r\n            \"gi\"\r\n        );\r\n\r\n        // Create an array to hold our data. Give the array\r\n        // a default empty first row.\r\n        var arrData = [[]];\r\n\r\n        // Create an array to hold our individual pattern\r\n        // matching groups.\r\n        var arrMatches = null;\r\n\r\n        // Keep looping over the regular expression matches\r\n        // until we can no longer find a match.\r\n        while (arrMatches = objPattern.exec(strData)) {\r\n\r\n            // Get the delimiter that was found.\r\n            var strMatchedDelimiter = arrMatches[1];\r\n\r\n            // Check to see if the given delimiter has a length\r\n            // (is not the start of string) and if it matches\r\n            // field delimiter. If id does not, then we know\r\n            // that this delimiter is a row delimiter.\r\n            if (\r\n                strMatchedDelimiter.length &&\r\n                strMatchedDelimiter !== strDelimiter\r\n            ) {\r\n\r\n                // Since we have reached a new row of data,\r\n                // add an empty row to our data array.\r\n                arrData.push([]);\r\n\r\n            }\r\n\r\n            var strMatchedValue;\r\n\r\n            // Now that we have our delimiter out of the way,\r\n            // let's check to see which kind of value we\r\n            // captured (quoted or unquoted).\r\n            if (arrMatches[2]) {\r\n                // We found a quoted value. When we capture\r\n                // this value, unescape any double quotes.\r\n                strMatchedValue = arrMatches[2].replace(new RegExp(\"\\\"\\\"\", \"g\"), \"\\\"\");\r\n\r\n                if (strMatchedValue === 'undefined') {\r\n                    strMatchedValue = '';\r\n                }\r\n            } else {\r\n                // We found a non-quoted value.\r\n                strMatchedValue = arrMatches[3];\r\n            }\r\n\r\n            // Now that we have our value string, let's add\r\n            // it to the data array.\r\n            arrData[arrData.length - 1].push(strMatchedValue?strMatchedValue.trim():strMatchedValue);\r\n        }\r\n\r\n        //Remove blank rows\r\n        let outputArray = [];\r\n        arrData.forEach((row) => {\r\n            if (row.join('') === '')return;\r\n            outputArray.push(row);\r\n        });\r\n\r\n        // Return the parsed data.\r\n        return (outputArray);\r\n    },\r\n\r\n    asObjectArray(csv){\r\n        let header = csv[0];\r\n        let output = [];\r\n        csv.slice(1).forEach((row, rowIndex) => {\r\n            output.push(_.object(header, row));\r\n        });\r\n        return output;\r\n    }\r\n}\r\n","import CSV from './util/CSV';\r\nexport default class EntityManager{ \r\n    constructor(){}\r\n\r\n    async fetchStaticJson(url, options){   \r\n        return await fetch(url, options)\r\n            .then(response => {\r\n                return response.json()\r\n            })     \r\n            .catch(function (ex, b) {\r\n                console.log('Fetch Static Error:', ex);\r\n                throw ex;\r\n            });\r\n    } \r\n\r\n    async fetchStaticText(url, options){   \r\n        return await fetch(url, options)\r\n            .then(response => {            \r\n                return response.text();\r\n            })   \r\n            .then((responseText) => {\r\n                return CSV.fromString(responseText);                \r\n            })  \r\n            .catch(function (ex, b) {\r\n                console.log('Fetch Static Error:', ex);\r\n                throw ex;\r\n            });\r\n    }     \r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport EntityManager from './EntityManager';\nimport 'react-bootstrap-table-next/dist/react-bootstrap-table2.min.css';\nimport 'react-bootstrap-table2-paginator/dist/react-bootstrap-table2-paginator.min.css';\nimport './style/index.scss';\n\nalert('index');\nwindow.EM = new EntityManager();\n(async function(){\n    ReactDOM.render(<App />, document.getElementById('root'));\n})();\n"],"sourceRoot":""}