{"version":3,"sources":["pages/Home.js","App.js","util/CSV.js","EntityManager.js","index.js"],"names":["Home","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","key","EM","getQs","dtdcId","dvdcId","state","currentEvent","maxWidth","window","innerWidth","electionDates","map","ed","index","assign","color","id","className","holidays","holiday","onClose","bind","assertThisInitialized","calendarRef","React","createRef","self","parent","console","log","addEventListener","event","data","width","setState","postMessage","message","_this2","react_default","a","createElement","style","main_esm","ref","defaultView","height","header","left","center","right","buttonText","today","month","week","day","list","plugins","googleCalendarPlugin","dayGridPlugin","listPlugin","googleCalendarApiKey","eventSources","googleCalendarId","eventClick","info","jsEvent","preventDefault","extendedProps","description","location","reactstrap_es","isOpen","toggle","title","dangerouslySetInnerHTML","__html","onClick","Component","App","Home_Home","CSV","strData","strDelimiter","objPattern","RegExp","arrData","arrMatches","exec","strMatchedValue","strMatchedDelimiter","length","push","replace","trim","outputArray","forEach","row","join","DateTime","require","EntityManager","qs","getQsParams","fetchStaticJson","holidaysRaw","keys","topKey","Array","prototype","apply","getHolidaysFromTopKey","output","static","dt","bits","split","start1","local","parseInt","start2","start","toISODate","end","e","dynamic","url","options","fetch","then","response","json","catch","ex","b","text","responseText","query","search","substring","vars","i","pair","value","decodeURIComponent","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","next","init","ReactDOM","render","src_App","document","getElementById","stop"],"mappings":"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","file":"static/js/main.5685cfe9.chunk.js","sourcesContent":["/* global EM */\r\nimport React, { Component } from 'react';\r\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\r\nimport FullCalendar from '@fullcalendar/react'\r\nimport googleCalendarPlugin from '@fullcalendar/google-calendar';\r\nimport dayGridPlugin from '@fullcalendar/daygrid';\r\nimport listPlugin from '@fullcalendar/list';\r\n\r\nexport default class Home extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.key = EM.getQs('key');\r\n        this.dtdcId = \"9hsi23n792il4r2fpnk08kmnj8@group.calendar.google.com\";\r\n        this.dvdcId = \"88nt7fbcnbvdk7q5ojngskd2rc@group.calendar.google.com\";\r\n\r\n        this.state = {\r\n            currentEvent: null,\r\n            maxWidth: window.innerWidth\r\n        };\r\n\r\n        this.electionDates = EM.electionDates.map((ed, index) => {\r\n            return Object.assign({}, ed, { color: '#d03b3b', id: 'e' + index, className: 'election' });\r\n        });\r\n\r\n        this.holidays = EM.holidays.map((holiday, index) => {\r\n            return Object.assign({}, holiday, { color: '#ccc', id: 'h' + index, className: 'holiday' });\r\n        });        \r\n\r\n        this.onClose = this.onClose.bind(this);\r\n        \r\n        this.calendarRef = React.createRef();\r\n        var self = this;\r\n\r\n        if (window.parent){            \r\n            console.log('sending message', window.parent);\r\n            window.addEventListener('message', function (event) {\r\n                console.log('message received from parent', event.data);\r\n                if (event.data.width) {\r\n                    self.setState({ maxWidth: event.data.width })\r\n                }\r\n            }, false);\r\n            window.parent.postMessage({ message: 'getWidth' }, '*');\r\n        }\r\n    }\r\n\r\n    onClose() {\r\n        this.setState({ currentEvent: null });\r\n    }\r\n\r\n    render() {\r\n        console.log(this.state.maxWidth);\r\n        return (\r\n            <div key=\"contents\" className=\"page page-home container-fluid\" style={{ width: this.state.maxWidth - 15 }}>\r\n                <FullCalendar\r\n                    ref={this.calendarRef} \r\n                    defaultView=\"listMonth\"\r\n                    height={\"parent\"}\r\n                    header={{\r\n                        left: this.state.maxWidth < 960 ? 'today': 'prev,next today',\r\n                        center: 'title',\r\n                        right: this.state.maxWidth < 960 ? 'prev,next' : 'listMonth,dayGridMonth,dayGridWeek'\r\n                    }}\r\n                    buttonText={{\r\n                        today: 'Today',\r\n                        month: 'Month',\r\n                        week: 'Week',\r\n                        day: 'Day',\r\n                        list: 'List'\r\n                    }}\r\n                    plugins={[googleCalendarPlugin, dayGridPlugin, listPlugin]}\r\n                    googleCalendarApiKey={this.key}\r\n                    eventSources={[\r\n                        this.electionDates,\r\n                        this.holidays,\r\n                        {\r\n                            googleCalendarId: this.dtdcId,\r\n                            className: 'dtdc',\r\n                            id: 'dtdc',\r\n                            color: \"#f7c121\",                            \r\n                        },\r\n                        {\r\n                            googleCalendarId: this.dvdcId,\r\n                            className: 'dvdc',\r\n                            id: 'dvdc',\r\n                            color: \"#27aff3\",                            \r\n                        }\r\n                    ]}\r\n                    eventClick={(info) => {\r\n                        info.jsEvent.preventDefault();\r\n                        if (info.event.extendedProps){\r\n                            if (info.event.extendedProps.description || info.event.extendedProps.location)\r\n                                this.setState({ currentEvent: info.event });\r\n                        }\r\n                    }}\r\n                />\r\n                {this.state.currentEvent ? \r\n                    <Modal isOpen={this.state.currentEvent?true:false} toggle={this.onClose}>\r\n                        <ModalHeader toggle={this.toggle}>{this.state.currentEvent.title}</ModalHeader>\r\n                        <ModalBody>     \r\n                            <h5>Description:</h5>                      \r\n                            <div dangerouslySetInnerHTML={{ __html: this.state.currentEvent.extendedProps.description }} />\r\n                            <hr/>\r\n                            <h5>Location:</h5>\r\n                            <div dangerouslySetInnerHTML={{ __html: this.state.currentEvent.extendedProps.location }} />\r\n                        </ModalBody>\r\n                        <ModalFooter>\r\n                            <Button color=\"secondary\" onClick={this.onClose}>Close</Button>\r\n                        </ModalFooter>\r\n                    </Modal>\r\n                : null }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React, { Component } from 'react';\nimport Home from './pages/Home';\n\nclass App extends Component {\n    render() {\n        return (         \n            <div className={'page-container'}>\n                <Home {...this.props} />} />\n            </div>     \n        );\n    }\n}\n\nexport default App;\n","/* eslint no-cond-assign: 0 */\r\nimport saver from 'file-saver';\r\nimport _ from 'underscore';\r\n\r\nexport default {\r\n    save: (filename, data) => {\r\n        let csv_output = '';\r\n        _.each(data, function (row) {\r\n            let rowOutput = _.map(row, function (cell) {\r\n                if (typeof cell !== \"undefined\" && cell != null) {\r\n                    return cell.toString().replace(/\"/g, '\"\"');\r\n                } else {\r\n                    return '';\r\n                }\r\n            });\r\n            csv_output += '\"' + rowOutput.join('\",\"') + '\"\\n';\r\n        });\r\n\r\n        let newName = filename;\r\n        if (filename.slice(-4) !== '.csv'){\r\n            newName = filename + '.csv';\r\n        }\r\n        saver.saveAs(new Blob([csv_output], { type: \"text/csv\" }), newName);\r\n    },\r\n\r\n    fromString: (strData, strDelimiter) => {\r\n        // Check to see if the delimiter is defined. If not,\r\n        // then default to comma.\r\n        strDelimiter = (strDelimiter || \",\");\r\n\r\n        // Create a regular expression to parse the CSV values.\r\n        var objPattern = new RegExp(\r\n            (\r\n                // Delimiters.\r\n                \"(\\\\\" + strDelimiter + \"|\\\\r?\\\\n|\\\\r|^)\" +\r\n\r\n                // Quoted fields.\r\n                \"(?:\\\"([^\\\"]*(?:\\\"\\\"[^\\\"]*)*)\\\"|\" +\r\n\r\n                // Standard fields.\r\n                \"([^\\\"\\\\\" + strDelimiter + \"\\\\r\\\\n]*))\"\r\n            ),\r\n            \"gi\"\r\n        );\r\n\r\n        // Create an array to hold our data. Give the array\r\n        // a default empty first row.\r\n        var arrData = [[]];\r\n\r\n        // Create an array to hold our individual pattern\r\n        // matching groups.\r\n        var arrMatches = null;\r\n\r\n        // Keep looping over the regular expression matches\r\n        // until we can no longer find a match.\r\n        while (arrMatches = objPattern.exec(strData)) {\r\n\r\n            // Get the delimiter that was found.\r\n            var strMatchedDelimiter = arrMatches[1];\r\n\r\n            // Check to see if the given delimiter has a length\r\n            // (is not the start of string) and if it matches\r\n            // field delimiter. If id does not, then we know\r\n            // that this delimiter is a row delimiter.\r\n            if (\r\n                strMatchedDelimiter.length &&\r\n                strMatchedDelimiter !== strDelimiter\r\n            ) {\r\n\r\n                // Since we have reached a new row of data,\r\n                // add an empty row to our data array.\r\n                arrData.push([]);\r\n\r\n            }\r\n\r\n            var strMatchedValue;\r\n\r\n            // Now that we have our delimiter out of the way,\r\n            // let's check to see which kind of value we\r\n            // captured (quoted or unquoted).\r\n            if (arrMatches[2]) {\r\n                // We found a quoted value. When we capture\r\n                // this value, unescape any double quotes.\r\n                strMatchedValue = arrMatches[2].replace(new RegExp(\"\\\"\\\"\", \"g\"), \"\\\"\");\r\n\r\n                if (strMatchedValue === 'undefined') {\r\n                    strMatchedValue = '';\r\n                }\r\n            } else {\r\n                // We found a non-quoted value.\r\n                strMatchedValue = arrMatches[3];\r\n            }\r\n\r\n            // Now that we have our value string, let's add\r\n            // it to the data array.\r\n            arrData[arrData.length - 1].push(strMatchedValue?strMatchedValue.trim():strMatchedValue);\r\n        }\r\n\r\n        //Remove blank rows\r\n        let outputArray = [];\r\n        arrData.forEach((row) => {\r\n            if (row.join('') === '')return;\r\n            outputArray.push(row);\r\n        });\r\n\r\n        // Return the parsed data.\r\n        return (outputArray);\r\n    },\r\n\r\n    asObjectArray(csv){\r\n        let header = csv[0];\r\n        let output = [];\r\n        csv.slice(1).forEach((row, rowIndex) => {\r\n            output.push(_.object(header, row));\r\n        });\r\n        return output;\r\n    }\r\n}\r\n","import CSV from './util/CSV';\r\nconst { DateTime } = require(\"luxon\");\r\n\r\nexport default class EntityManager{ \r\n    async init(){\r\n        this.qs = this.getQsParams();\r\n    \r\n        this.electionDates = await this.fetchStaticJson('data/election-dates.json');\r\n        this.holidaysRaw = await this.fetchStaticJson('data/holidays.json');\r\n        this.holidays = [];        \r\n        Object.keys(this.holidaysRaw).forEach(topKey => {\r\n            Array.prototype.push.apply(this.holidays, this.getHolidaysFromTopKey(topKey));\r\n        });\r\n    }\r\n\r\n    getHolidaysFromTopKey(topKey){\r\n        let output = [];\r\n        Object.keys(this.holidaysRaw[topKey].static).forEach(dt => {\r\n            try{\r\n                let bits = dt.split('/');\r\n                let start1 = DateTime.local(2019, parseInt(bits[0]), parseInt(bits[1]));\r\n                let start2 = DateTime.local(2020, parseInt(bits[0]), parseInt(bits[1]));\r\n                let title = this.holidaysRaw[topKey].static[dt];\r\n                output.push({\r\n                    start: start1.toISODate(),\r\n                    end: start1.toISODate(),\r\n                    title: title\r\n                });  \r\n                output.push({\r\n                    start: start2.toISODate(),\r\n                    end: start2.toISODate(),\r\n                    title: title\r\n                }); \r\n            }catch(e){\r\n                console.log(topKey, dt);\r\n            }           \r\n        });\r\n        Object.keys(this.holidaysRaw[topKey].dynamic).forEach(dt => {\r\n            try{\r\n                let bits = dt.split('/');\r\n                let start1 = DateTime.local(parseInt(bits[2]), parseInt(bits[0]), parseInt(bits[1]));\r\n                let title = this.holidaysRaw[topKey].dynamic[dt];\r\n                output.push({\r\n                    start: start1.toISODate(),\r\n                    end: start1.toISODate(),\r\n                    title: title\r\n                });\r\n            }catch(e){\r\n                console.log(topKey, dt);\r\n            }           \r\n        });        \r\n        return output;\r\n    }\r\n\r\n    async fetchStaticJson(url, options){   \r\n        return await fetch(url, options)\r\n            .then(response => {\r\n                return response.json()\r\n            })     \r\n            .catch(function (ex, b) {\r\n                console.log('Fetch Static Error:', ex);\r\n                throw ex;\r\n            });\r\n    } \r\n\r\n    async fetchStaticText(url, options){   \r\n        return await fetch(url, options)\r\n            .then(response => {            \r\n                return response.text();\r\n            })   \r\n            .then((responseText) => {\r\n                return CSV.fromString(responseText);                \r\n            })  \r\n            .catch(function (ex, b) {\r\n                console.log('Fetch Static Error:', ex);\r\n                throw ex;\r\n            });\r\n    }     \r\n\r\n    getQsParams() {\r\n        var query = window.location.search.substring(1);\r\n        var output = {};\r\n        if (query.length > 0){\r\n            var vars = query.split('&');\r\n            for (var i = 0; i < vars.length; i++) {\r\n                var pair = vars[i].split('=');\r\n                var value = pair[1] ? decodeURIComponent(pair[1]) : null;\r\n                output[decodeURIComponent(pair[0])] = value ? value : true;\r\n            }\r\n        }\r\n        return output;\r\n    }\r\n    \r\n    getQs(key){\r\n        if (this.qs[key]){\r\n            return this.qs[key];\r\n        }else{\r\n            return false;\r\n        }\r\n    }    \r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport EntityManager from './EntityManager';\nimport 'react-bootstrap-table-next/dist/react-bootstrap-table2.min.css';\nimport 'react-bootstrap-table2-paginator/dist/react-bootstrap-table2-paginator.min.css';\nimport './style/index.scss';\n\nwindow.EM = new EntityManager();\n(async function(){\n    await window.EM.init();\n    ReactDOM.render(<App />, document.getElementById('root'));\n})();\n"],"sourceRoot":""}